# def process_single_test_case(n, a):
#     if a==sorted(a):
#         return 0
#     i,j=0,0
#     r=[]
#     while(i<j):
#         if a[i]>a[j]:
#             a[i],a[j]=a[j],a[i]
#             i+=1
#             j-=1
#             r.append((i,j))
#     return r
        
# for _ in range(int(input())):
#     n=int(input())
#     a=list(map(int,input().split()))
#     print(process_single_test_case(n,a))
    
def solve_single_test_case(n, columns):
    moves = []
    
    # Count the number of columns with 0, 1, and 2 inscriptions
    count_0 = columns.count(0)
    count_1 = columns.count(1)
    count_2 = columns.count(2)
    
    # We need to make sure that all 1s are followed by 2s and all 0s are before 1s
    # First, move all 2s to the end
    for i in range(n):
        if columns[i] == 2:
            # Find a 1 to swap with
            for j in range(i + 1, n):
                if columns[j] == 1:
                    moves.append((i + 1, j + 1))
                    columns[i], columns[j] = columns[j], columns[i]
                    break
    
    # Now, move all 1s to the middle
    for i in range(n):
        if columns[i] == 1:
            # Find a 0 to swap with
            for j in range(i + 1, n):
                if columns[j] == 0:
                    moves.append((i + 1, j + 1))
                    columns[i], columns[j] = columns[j], columns[i]
                    break
    
    # Output the result
    print(len(moves))
    for move in moves:
        print(move[0], move[1])

# Example usage:
n = 3
columns = [1, 2, 0]
solve_single_test_case(n, columns)
